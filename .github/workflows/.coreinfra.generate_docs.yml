name: Publish CoreInfra docs
on:
  workflow_dispatch:
  push:
    branches: [ main, feature/auto-docs ]
    paths:
      - 'CoreInfra/*.bicep'
      - '.ps-docs/*.Doc.ps1'
      - '.github/workflows/.coreinfra.generate_docs.yml'

env:
  inputPath: CoreInfra/coreInfra.bicep
  outputPath: CoreInfra/CoreInfra.md

permissions:
  id-token: write
  contents: read

jobs:
  publish:
    environment: stg
    name: Publish
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Install Azure CLI
      run: |
        pwd
        echo "Input path: ${{ env.inputPath }}"
        ls -al CoreInfra

        echo "Working Dir"
        ls -al ./


        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    # - name: Azure CLI script
    #   uses: azure/CLI@v1
    #   with:
    #     azcliversion: latest
    #     inlineScript: |
    #       az bicep build \
    #         --file ${{ env.inputPath }} \
    #         --outfile ${{ env.inputPath }}.json

    - name: Bicep Build
      uses: Azure/bicep-build-action@v1.0.0
      with:
        bicepFilePath: '${{github.workspace}}/${{ env.inputPath }}'
        outputFilePath: ${{ env.inputPath }}.json

    # Generate markdown files using PSDocs
    # Scan for Azure template file recursively in sub-directories
    # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md
    - name: Generate docs
      uses: microsoft/ps-docs@v0.1.0
      with:
        # conventions: Azure.NameByParentPath
        modules: PSDocs.Azure
        inputPath: CoreInfra
        outputPath: '${{ env.outputPath }}'
        prerelease: true

            # STEP 1: Generate Markdowns using PSDocs
    - name: Generate ARM markdowns
      run: |
        Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -force;
        # Scan for Azure template file recursively in the templates/ directory
        Get-AzDocTemplateFile -Path CoreInfra/ | ForEach-Object {
          # Generate a standard name of the markdown file. i.e. <name>_<version>.md
          $template = Get-Item -Path $_.TemplateFile;
          $templateName = $template.Directory.Parent.Name;
          $version = $template.Directory.Name;
          $docName = "$($templateName)_$version";
          # Generate markdown
          $option = New-PSDocumentOption -Option @{ 'Output.Culture' = 'en-US' }
          Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName -Option $option;
        }
      shell: pwsh
